{"Number_Chains":{"instructions":"Given a number, we can form a number chain by\n\n1) arranging its digits in descending order\n2) arranging its digits in ascending order\n3) subtracting the number obtained in (2) from the number\n   obtained (1) to form a new number\n4) and repeat these steps unless the new number has already\n   appeared in the chain\n   \nNote that 0 is a permitted digit. The number of distinct\nnumbers in the chain is the length of the chain. You are to\nwrite a program that reads numbers and outputs the number\nchain and the length of that chain for each number read.\n\nInput and Output\n----------------\nThe input consists of a positive number, less than 10^9.\nThe output consists of the number chain generated by the\ninput number, followed by its lengths exactly in the format\nindicated below.\n\nExample-1\n---------\nInput\n123456789\n\nOutput\nOriginal number was 123456789\n987654321 - 123456789 = 864197532\n987654321 - 123456789 = 864197532\nChain length 2\n\nExample-2\n---------\nInput\n1234\n\nOutput\nOriginal number was 1234\n4321 - 1234 = 3087\n8730 - 378 = 8352\n8532 - 2358 = 6174\n7641 - 1467 = 6174\nChain length 4\n\nExample-3\n---------\nInput\n444\n\nOutput\nOriginal number was 444\n444 - 444 = 0\n0 - 0 = 0\nChain length 2\n\n\n[Source: http://uva.onlinejudge.org/]"},"Haiku_Review":{"instructions":"Haiku is an ancient form of Japanese poetry. A haiku\nis a three-line poem with seventeen syllables, where\nthe first line must contain five syllables, the second\nline must contain seven syllables, and the third line\nmust contain five syllables. The lines do not have to\nrhyme. Here is an example, where slashes separate the\nlines:\n\nComputer programs/The bugs try to eat my code/I must not let them.\n\n\nYou must write a program that will review a haiku and\ncheck that each line contains the correct number of\nsyllables.\n\nInput\n\nThe input contains one or more lines, each of which\ncontains a single haiku. A haiku will contain at least\nthree words, and words will be separated by either a\nsingle space or a slash ('/'). Slashes also separate\nthe three lines of a haiku, so each haiku will contain\nexactly two slashes. (The three lines of the haiku will\nbe contained within one physical line of the file.)\n\nA haiku will contain only lowercase letters ('a'-'z'),\nforward slashes ('/'), and spaces, and will be no more\nthan 200 characters long (not counting the end-of-line\ncharacters).\n\nEach haiku is guaranteed to contain three lines, and\neach line will contain at least one word. Your job is\nto determine whether each line has the correct number\nof syllables (5/7/5). For the purposes of this problem,\nevery contiguous sequence of one or more vowels counts\nas one syllable, where the vowels are\na, e, i, o, u, and y. Every word will contain at least\none syllable.\n\n(Note that this method of counting syllables does not\nalways agree with English conventions. In the second\nexample below, your program must consider the word\n'code' to have two syllables because the 'o' and the\n'e' are not consecutive. However, in English the 'e'\nis silent and so 'code' actually has only one syllable.)\n\nOutput\n\nFor each haiku, output a comma-separated single line\nthat contains the number of syllables in each haiku,\ntogether with the letter Y if it is a haiku, or N if\nit is not a haiku (see below).\n\n\nSample Input\n------------\nhappy purple frog/eating bugs in the marshes/get indigestion\ncomputer programs/the bugs try to eat my code/i will not let them\n\nSample Output\n-------------\n5,7,5,Yes\n5,8,5,No\n\n\n[Source: http://uva.onlinejudge.org/]"},"Gray_Code":{"instructions":"Create functions to encode a number to and decode\na number from Gray code. Display the normal binary\nrepresentations, Gray code representations, and\ndecoded Gray code values for all 5-bit binary\nnumbers (0-31 inclusive, leading 0's not necessary).\n\nThere are many possible Gray codes. The following\nencodes what is called \"binary reflected Gray code.\"\n\nEncoding (MSB is bit 0, b is binary, g is Gray code):\n  if b[i-1] = 1\n     g[i] = not b[i]\n  else\n     g[i] = b[i]\n\n\nDecoding (MSB is bit 0, b is binary, g is Gray code):\n  b[0] = g[0]\n\n  for other bits:\n  b[i] = g[i] xor b[i-1]\n\n\n[Source http://rosettacode.org]"},"Verbal":{"instructions":"\nThis is an instructor-led exercise with no written instructions.\nYour instructor will explain the exercise.\n"},"Calc_Stats":{"instructions":"Your task is to process a sequence of integer numbers\nto determine the following statistics:\n\n    o) minimum value\n    o) maximum value\n    o) number of elements in the sequence\n    o) average value\n\nFor example: [6, 9, 15, -2, 92, 11]\n\n    o) minimum value = -2\n    o) maximum value = 92\n    o) number of elements in the sequence = 6\n    o) average value = 21.833333\n\n\n"},"Fizz_Buzz":{"instructions":"Write a program that prints the numbers from 1 to 100.\nBut for multiples of three print \"Fizz\" instead of the\nnumber and for the multiples of five print \"Buzz\". For\nnumbers which are multiples of both three and five\nprint \"FizzBuzz\".\n\nSample output:\n\n1\n2\nFizz\n4\nBuzz\nFizz\n7\n8\nFizz\nBuzz\n11\nFizz\n13\n14\nFizzBuzz\n16\n17\nFizz\n19\nBuzz\n... etc up to 100\n"},"Unsplice":{"instructions":"Given a string, strip all occurences of consecutively \noccuring backslash and newline characters. For example, \nassuming that:\n\"\\\\\" represents '\\' and \n\"\\n\" represents '\\n'\n\n  \"ab\\\\\\ncd\\\\\\nef\" --> \"abcdef\" (two stripped out)\n\n  \"abc\\\\\\ndef\"     --> \"abcdef\" (one stripped out)\n\n  \"abc\\n\\\\def\"     --> unchanged (wrong order)\n\n  \"abc\\\\def\"       --> unchanged (no \\n)\n\n  \"abc\\ndef\"       --> unchanged (no \\)\n\n  \"abcdef\"         --> unchanged\n\n\n"},"Yatzy_Cutdown":{"instructions":"The game of yatzy is a simple dice game. Each player\nrolls five six-sided dice. The player places the roll in\na category, such as one-pair, two-pair, small-straight etc\n(see below).\nIf the roll is compatible with the category, the player\ngets a score for the roll according to the rules. If the\nroll is not compatible with the category, the player scores\nzero for the roll.\n\nFor example, if a player rolls 5,6,5,6,2 and scores the\ndice in the two-pairs category they would score 22 (5+5+6+6).\n\nYour task is to score a GIVEN roll in a GIVEN category.\nYou do NOT have to program the random dice rolling.\nYou do NOT have to program re-rolls (as in the real game).\nYou do NOT play by letting the computer choose the highest\nscoring category for a given roll.\n\n\nYatzy Categories and Scoring Rules\n==================================\n\nYatzy:\n  If all dice have the same number,\n  the player scores 50 points, otherwise 0.\n  For example,\n   1,1,1,1,1 placed on \"yatzy\" scores 50\n   5,5,5,5,5 placed on \"yatzy\" scores 50\n   1,1,1,2,1 placed on \"yatzy\" scores 0\n\nPair:\n  If exactly two dice have the same value then\n  the player scores the sum of the two highest matching dice.\n  For example, when placed on \"pair\"\n   3,3,3,4,4 scores 8 (4+4)\n   1,1,6,2,6 scores 12 (6+6)\n   3,3,3,4,1 scores 0\n   3,3,3,3,1 scores 0\n\nTwo pairs:\n  If exactly two dice have the same value and exactly\n  two dice have a different value then the\n  player scores the sum of these four dice.\n  For example, when placed on \"two pairs\"\n   1,1,2,3,3 scores 8 (1+1+3+3)\n   1,1,2,3,4 scores 0\n   1,1,2,2,2 scores 0\n\nThree of a kind:\n  If there are exactly three dice with the same number\n  then the player scores the sum of these dice.\n  For example, when placed on \"three of a kind\"\n    3,3,3,4,5 scores 9 (3+3+3)\n    3,3,4,5,6 scores 0\n    3,3,3,3,1 scores 0\n\nFour of a kind:\n  If there are exactly four dice with the same number\n  then the player scores the sum of these dice.\n  For example, when placed on \"four of a kind\"\n    2,2,2,2,5 scores 8 (2+2+2+2)\n    2,2,2,5,5 scores 0\n    2,2,2,2,2 scores 0\n\nSmall straight:\n  When placed on \"small straight\", if the dice read\n  1,2,3,4,5, the player scores 15 (the sum of all the dice).\n\nLarge straight:\n  When placed on \"large straight\", if the dice read\n  2,3,4,5,6, the player scores 20 (the sum of all the dice).\n\nFull house:\n  If the dice are two of a kind and three of a different kind\n  then the player scores the sum of all five dice.\n  For example, when placed on \"full house\"\n    1,1,2,2,2 scores 8 (1+1+2+2+2)\n    2,2,3,3,4 scores 0\n    4,4,4,4,4 scores 0\n"},"Mars_Rover":{"instructions":"\nThe instructions for this exercise can be found here\nhttps://code.google.com/p/marsrovertechchallenge/\n"},"Bowling_Game":{"instructions":"Write a program to score a game of Ten-Pin Bowling.\n\nInput: string (described below) representing a bowling game\nOuput: integer score\n\nThe scoring rules:\n\nEach game, or \"line\" of bowling, includes ten turns, \nor \"frames\" for the bowler.\n\nIn each frame, the bowler gets up to two tries to \nknock down all ten pins.\n\nIf the first ball in a frame knocks down all ten pins,\nthis is called a \"strike\". The frame is over. The score \nfor the frame is ten plus the total of the pins knocked \ndown in the next two balls.\n\nIf the second ball in a frame knocks down all ten pins, \nthis is called a \"spare\". The frame is over. The score \nfor the frame is ten plus the number of pins knocked \ndown in the next ball.\n\nIf, after both balls, there is still at least one of the\nten pins standing the score for that frame is simply\nthe total number of pins knocked down in those two balls.\n\nIf you get a spare in the last (10th) frame you get one \nmore bonus ball. If you get a strike in the last (10th) \nframe you get two more bonus balls.\nThese bonus throws are taken as part of the same turn. \nIf a bonus ball knocks down all the pins, the process \ndoes not repeat. The bonus balls are only used to \ncalculate the score of the final frame.\n\nThe game score is the total of all frame scores.\n\nExamples:\n\nX indicates a strike\n/ indicates a spare\n- indicates a miss\n| indicates a frame boundary\nThe characters after the || indicate bonus balls\n\nX|X|X|X|X|X|X|X|X|X||XX\nTen strikes on the first ball of all ten frames.\nTwo bonus balls, both strikes.\nScore for each frame == 10 + score for next two \nballs == 10 + 10 + 10 == 30\nTotal score == 10 frames x 30 == 300\n\n9-|9-|9-|9-|9-|9-|9-|9-|9-|9-||\nNine pins hit on the first ball of all ten frames.\nSecond ball of each frame misses last remaining pin.\nNo bonus balls.\nScore for each frame == 9\nTotal score == 10 frames x 9 == 90\n\n5/|5/|5/|5/|5/|5/|5/|5/|5/|5/||5\nFive pins on the first ball of all ten frames.\nSecond ball of each frame hits all five remaining\npins, a spare.\nOne bonus ball, hits five pins.\nScore for each frame == 10 + score for next one\nball == 10 + 5 == 15\nTotal score == 10 frames x 15 == 150\n\nX|7/|9-|X|-8|8/|-6|X|X|X||81\nTotal score == 167\n\n\n"},"Eight_Queens":{"instructions":"\nPlace eight chess queens on an 8x8 chessboard so that\nno two queens threaten each other. Thus, a solution\nrequires that no two queens share the same row,\ncolumn, or diagonal.\n\n[source: http://en.wikipedia.org/wiki/Eight_queens_puzzle]"},"Harry_Potter":{"instructions":"To try and encourage more sales of the 5 different Harry\nPotter books they sell, a bookshop has decided to offer \ndiscounts of multiple-book purchases. \n\nOne copy of any of the five books costs 8 EUR. \n\nIf, however, you buy two different books, you get a 5% \ndiscount on those two books.\n\nIf you buy 3 different books, you get a 10% discount. \n\nIf you buy 4 different books, you get a 20% discount.\n\nIf you go the whole hog, and buy all 5, you get a huge 25%\ndiscount. \n\nNote that if you buy, say, four books, of which 3 are \ndifferent titles, you get a 10% discount on the 3 that \nform part of a set, but the fourth book still costs 8 EUR. \n\nYour mission is to write a piece of code to calculate the \nprice of any conceivable shopping basket (containing only \nHarry Potter books), giving as big a discount as possible.\n\nFor example, how much does this basket of books cost?\n\n2 copies of the first book\n2 copies of the second book\n2 copies of the third book\n1 copy of the fourth book\n1 copy of the fifth book\n\nOne way of group these 8 books is:\n 1 group of 5 --> 25% discount (1st,2nd,3rd,4th,5th)\n+1 group of 3 --> 10% discount (1st,2nd,3rd)\nThis would give a total of\n 5 books at a 25% discount\n+3 books at a 10% discount\nGiving\n 5 x (8 - 2.00) == 5 x 6.00 == 30.00\n+3 x (8 - 0.80) == 3 x 7.20 == 21.60\nFor a total of 51.60\n\nHowever, a different way to group these 8 books is:\n 1 group of 4 books --> 20% discount  (1st,2nd,3rd,4th)\n+1 group of 4 books --> 20% discount  (1st,2nd,3rd,5th)\nThis would give a total of\n 4 books at a 20% discount\n+4 books at a 20% discount\nGiving\n 4 x (8-1.60) == 4 x 6.40 == 25.60\n+4 x (8-1.60) == 4 x 6.40 == 25.60\nFor a total of 51.20\n\nAnd 51.20 is the price with the biggest discount.\n"},"Reordering":{"instructions":"Given a set of integer numbers your task is to\nreorder them as follows:\n\n1) Move a range of elements from one position to another,\n   preserving their order and the order of the other\n   elements.\n   \n   e.g. Given the set\n   { 4, 2, 7, 5, 9, 8, 6, 4, 3, 2 }\n        ^     ^              ^\n        s     e              p\n   \n   moving the range of elements starting at element 2 (s)\n   and ending at element 4 (e) to the position before\n   element 9 (p) will give\n   \n   { 4, 9, 8, 6, 4, 2, 7, 5, 3, 2 }\n                    ^     ^\n                    s     e\n\n2) Move all elements whose value would produce a Fizz,\n   Buzz or FizzBuzz output after a specified element,\n   preserving their order and the order of the other\n   elements.\n   \n   e.g. Given the set\n   { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\n     15, 16, 17, 18, 19, 20 }\n   \n   and specifying element 4 the result would be\n   { 1, 2, 4, 3, 5, 6, 9, 10, 12, 15, 18, 20, 7, 8,\n     11, 13, 14, 16, 17, 19 }\n"},"Friday_13th":{"instructions":"\nWrite a program to show that the 13th day of the month\nfalls more often on a Friday than any other day of the\nweek. The 1st of January 1973 was a Monday.\nYou should aim at producing the clearest possible\nprogram, not the fastest.\n\n[source: BCPL the language and its compiler\nby Martin Richards and Colin Whitby-Strevens]\n"},"Game_of_Life":{"instructions":"Your task is to write a program to calculate the next\ngeneration of Conway's game of life, given any starting\nposition. You start with a two dimensional grid of cells, \nwhere each cell is either alive or dead. The grid is finite, \nand no life can exist off the edges. When calculating the \nnext generation of the grid, follow these four rules:\n\n1. Any live cell with fewer than two live neighbours dies, \n   as if caused by underpopulation.\n2. Any live cell with more than three live neighbours dies, \n   as if by overcrowding.\n3. Any live cell with two or three live neighbours lives \n   on to the next generation.\n4. Any dead cell with exactly three live neighbours becomes \n   a live cell.\n\nExamples: * indicates live cell, . indicates dead cell\n\nExample input: (4 x 8 grid)\n4 8\n........\n....*...\n...**...\n........\n\nExample output:\n4 8\n........\n...**...\n...**...\n........\n"},"Prime_Factors":{"instructions":"Factorize a positive integer number into its prime factors.\n\nFor example:\n\n\t 2 -> [2]\n\t 3 -> [3]\n\t 4 -> [2,2]\n\t 6 -> [2,3]\n\t 9 -> [3,3]\n\t12 -> [2,2,3]\n\t15 -> [3,5]\n\n"},"Number_Names":{"instructions":"Spell out a number. For example\n\n      99 --> ninety nine\n     300 --> three hundred\n     310 --> three hundred and ten\n    1501 --> one thousand, five hundred and one\n   12609 --> twelve thousand, six hundred and nine\n  512607 --> five hundred and twelve thousand,\n             six hundred and seven\n43112603 --> forty three million, one hundred and\n             twelve thousand,\n             six hundred and three\n\n[Source http://rosettacode.org]"},"Monty_Hall":{"instructions":"Suppose you're on a game show and you're given the\nchoice of three doors. Behind one door is a car; behind\nthe others, goats. The car and the goats were\nplaced randomly behind the doors before the show.\n\nThe rules of the game show are as follows:\n\nAfter you have chosen a door, the door remains closed\nfor the time being. The game show host, Monty Hall, who\nknows what is behind the doors, now has to open one of\nthe two remaining doors, and the door he opens must have\na goat behind it. If both remaining doors have goats\nbehind them, he chooses one randomly. After Monty Hall\nopens a door with a goat, he will ask you to decide\nwhether you want to stay with your first choice or to\nswitch to the last remaining door.\n\nFor example:\nImagine that you chose Door 1 and the host opens Door 3,\nwhich has a goat. He then asks you \"Do you want to switch\nto Door Number 2?\" Is it to your advantage to change your\nchoice?\n\nNote that the player may initially choose any of the\nthree doors (not just Door 1), that the host opens a\ndifferent door revealing a goat (not necessarily Door 3),\nand that he gives the player a second choice between the\ntwo remaining unopened doors.\n\nSimulate at least a thousand games using three doors for\neach strategy and show the results in such a way as to make\nit easy to compare the effects of each strategy.\n\n[Source http://rosettacode.org]"},"Yatzy":{"instructions":"The game of yatzy is a simple dice game. Each player\nrolls five six-sided dice. The player places the roll in\na category, such as ones, twos, fives, pair, two pairs\netc (see below).\nIf the roll is compatible with the category, the player\ngets a score for the roll according to the rules. If the\nroll is not compatible with the category, the player scores\nzero for the roll.\n\nFor example, if a player rolls 5,6,5,5,2 and scores the\ndice in the fives category they would score 15 (three fives).\n\nYour task is to score a GIVEN roll in a GIVEN category.\nYou do NOT have to program the random dice rolling.\nYou do NOT have to program re-rolls (as in the real game).\nYou do NOT play by letting the computer choose the highest\nscoring category for a given roll.\n\n\nYatzy Categories and Scoring Rules\n==================================\n\nChance:\n  The player scores the sum of all dice,\n  no matter what they read.\n  For example,\n   1,1,3,3,6 placed on \"chance\" scores 14 (1+1+3+3+6)\n   4,5,5,6,1 placed on \"chance\" scores 21 (4+5+5+6+1)\n\nYatzy:\n  If all dice have the same number,\n  the player scores 50 points.\n  For example,\n   1,1,1,1,1 placed on \"yatzy\" scores 50\n   5,5,5,5,5 placed on \"yatzy\" scores 50\n   1,1,1,2,1 placed on \"yatzy\" scores 0\n\nOnes, Twos, Threes, Fours, Fives, Sixes:\n  The player scores the sum of the dice that reads one,\n  two, three, four, five or six, respectively.\n  For example,\n   1,1,2,4,4 placed on \"fours\" scores 8 (4+4)\n   2,3,2,5,1 placed on \"twos\" scores 4  (2+2)\n   3,3,3,4,5 placed on \"ones\" scores 0\n\nPair:\n  If exactly two dice have the same value then\n  the player scores the sum of the two highest matching dice.\n  For example, when placed on \"pair\"\n   3,3,3,4,4 scores 8 (4+4)\n   1,1,6,2,6 scores 12 (6+6)\n   3,3,3,4,1 scores 0\n   3,3,3,3,1 scores 0\n\nTwo pairs:\n  If exactly two dice have the same value and exactly\n  two dice have a different value then the\n  player scores the sum of these four dice.\n  For example, when placed on \"two pairs\"\n   1,1,2,3,3 scores 8 (1+1+3+3)\n   1,1,2,3,4 scores 0\n   1,1,2,2,2 scores 0\n\nThree of a kind:\n  If there are exactly three dice with the same number\n  then the player scores the sum of these dice.\n  For example, when placed on \"three of a kind\"\n    3,3,3,4,5 scores 9 (3+3+3)\n    3,3,4,5,6 scores 0\n    3,3,3,3,1 scores 0\n\nFour of a kind:\n  If there are exactly four dice with the same number\n  then the player scores the sum of these dice.\n  For example, when placed on \"four of a kind\"\n    2,2,2,2,5 scores 8 (2+2+2+2)\n    2,2,2,5,5 scores 0\n    2,2,2,2,2 scores 0\n\nSmall straight:\n  When placed on \"small straight\", if the dice read\n  1,2,3,4,5, the player scores 15 (the sum of all the dice).\n\nLarge straight:\n  When placed on \"large straight\", if the dice read\n  2,3,4,5,6, the player scores 20 (the sum of all the dice).\n\nFull house:\n  If the dice are two of a kind and three of a different kind\n  then the player scores the sum of all five dice.\n  For example, when placed on \"full house\"\n    1,1,2,2,2 scores 8 (1+1+2+2+2)\n    2,2,3,3,4 scores 0\n    4,4,4,4,4 scores 0\n"},"Print_Diamond":{"instructions":"\nGiven a letter print a diamond starting with 'A'\nwith the supplied letter at the widest point.\n\nFor example: print-diamond 'E' prints\n\n    A\n   B B\n  C   C\n D     D\nE       E\n D     D\n  C   C\n   B B\n    A\n\nFor example: print-diamond 'C' prints\n\n  A\n B B\nC   C\n B B\n  A\n  "},"Anagrams":{"instructions":"Write a program to generate all potential \nanagrams of an input string.\n\nFor example, the potential anagrams of \"biro\" are\n\nbiro bior brio broi boir bori\nibro ibor irbo irob iobr iorb\nrbio rboi ribo riob roib robi\nobir obri oibr oirb orbi orib\n"},"Zeckendorf_Number":{"instructions":"Just as numbers can be represented in a positional\nnotation as sums of multiples of the powers of ten\n(decimal) or two (binary); all the positive integers\ncan be represented as the sum of one or zero times\nthe distinct members of the Fibonacci series.\n\nRecall that the first six distinct Fibonacci numbers\nare: 1, 2, 3, 5, 8, 13.\nThe decimal number eleven can be written as\n\n  0*13 + 1*8 + 0*5 + 1*3 + 0*2 + 0*1\n  \nor 010100 in positional notation where the columns\nrepresent multiplication by a particular member of the\nsequence. Leading zeroes are dropped so that eleven\ndecimal becomes 10100.\n\n10100 is not the only way to make eleven from the\nFibonacci numbers however;\n\n  0*13 + 1*8 + 0*5 + 0*3 + 1*2 + 1*1\n  \nor 010011 would also represent decimal 11. For a true\nZeckendorf number there is the added restriction that\nno two consecutive Fibonacci numbers can be used which\nleads to the former unique solution.\n\nYour task is to generate and show here a table of the\nZeckendorf number representations of the decimal numbers\nzero to twenty, in order.\n\n[Source http://rosettacode.org]"},"Tennis":{"instructions":"\nYou task is to implement a tennis scoring program.\nSummary of tennis scoring:\n\n1. A game is won by the first player to have won at\n   least four points in total and at least two points\n   more than the opponent.\n   \n2. The running score of each game is described in a\n   manner peculiar to tennis: scores from zero to three\n   points are described as \"love\", \"fifteen\", \"thirty\",\n   and \"forty\" respectively.\n   \n3. If at least three points have been scored by each\n   player, and the scores are equal, the score is \"deuce\".\n   \n4. If at least three points have been scored by each\n   side and a player has one more point than his opponent,\n   the score of the game is \"advantage\" for the player\n   in the lead.\n\n[source http://en.wikipedia.org/wiki/Tennis#Scoring]"},"ISBN":{"instructions":"\nISBN - International Standard Book Number\n-----------------------------------------\nThere are two ISBN standards: ISBN-10 and ISBN-13.\nSupport for ISBN-13 is essential, whereas support\nfor ISBN-10 is optional.\nHere are some valid examples of each:\n\nISBN-10:    0471958697\n            0 471 60695 2\n            0-470-84525-2\n            0-321-14653-0\n\nISBN-13:    9780470059029\n            978 0 471 48648 0\n            978-0596809485\n            978-0-13-149505-0\n            978-0-262-13472-9\n\nISBN-10 is made up of 9 digits plus a check digit (which\nmay be 'X') and ISBN-13 is made up of 12 digits plus a\ncheck digit. Spaces and hyphens may be included in a code,\nbut are not significant. This means that 9780471486480 is\nequivalent to 978-0-471-48648-0 and 978 0 471 48648 0.\n\nThe check digit for ISBN-10 is calculated by multiplying\neach digit by its position (i.e., 1 x 1st digit, 2 x 2nd\ndigit, etc.), summing these products together and taking\nmodulo 11 of the result (with 'X' being used if the result\nis 10).\n\nThe check digit for ISBN-13 is calculated by multiplying\neach digit alternately by 1 or 3 (i.e., 1 x 1st digit,\n3 x 2nd digit, 1 x 3rd digit, 3 x 4th digit, etc.), summing\nthese products together, taking modulo 10 of the result\nand subtracting this value from 10, and then taking the\nmodulo 10 of the result again to produce a single digit.\n\n\nBasic task:\nCreate a function that takes a string and returns true\nif that is a valid ISBN-13 and false otherwise.\n\nAdvanced task:\nAlso return true if the string is a valid ISBN-10."},"Mine_Field":{"instructions":"A field of N x M squares is represented by N lines of \nexactly M characters each. The character '*' represents \na mine and the character '.' represents no-mine. \n\nExample input (a 3 x 4 mine-field of 12 squares, 2 of\nwhich are mines)\n\n3 4\n*...\n..*.\n....\n\nYour task is to write a program to accept this input and\nproduce as output a hint-field of identical dimensions \nwhere each square is a * for a mine or the number of \nadjacent mine-squares if the square does not contain a mine. \n\nExample output (for the above input)\n*211\n12*1\n0111\n"},"Reversi":{"instructions":"Reversi is a board game for two players. The board contains\n8x8 squares. The players place Black or White counters onto\nthe board, one counter per square. More information can be\nfound on Wikipedia en.wikipedia.org/wiki/Reversi?. Your task\nis to write a program that takes a current board position\ntogether with information about whose turn it is, and returns\na list of the legal moves for that player. A move is only\nlegal if it results in at least one of the opponent's\ncounters being flipped.\n\nExample input: (the final B indicates it is Black's turn)\n........\n........\n........\n...BW...\n...WB...\n........\n........\n........\nB\n\nExample output: (each zero indicates a legal move for Black)\n........\n........\n....0...\n...BW0..\n..0WB...\n...0....\n........\n........\nB\n"},"Phone_Numbers":{"instructions":"Given a list of phone numbers, determine if it is \nconsistent. In a consistent phone list no number \nis a prefix of another. For example:\n\n    o) Bob 91 12 54 26\n    o) Alice 97 625 992\n    o) Emergency 911\n\nIn this case, it is not possible to call Bob because \nthe phone exchange would direct your call to the \nemergency line as soon as you dialled the first three \ndigits of Bob's phone number. So this list would not \nbe consistent.\n"},"Leap_Years":{"instructions":"Write a function that returns true or false depending on \nwhether its input integer is a leap year or not.\n\nA leap year is defined as one that is divisible by 4,\nbut is not otherwise divisible by 100 unless it is\nalso divisible by 400.\n\nFor example, 2001 is a typical common year and 1996\nis a typical leap year, whereas 1900 is an atypical\ncommon year and 2000 is an atypical leap year.\n"},"Saddle_Points":{"instructions":"\nWrite a program to search for the \"saddle points\" in\na 5 by 5 array of integers. A saddle point is a cell\nwhose value is greater than or equal to any in its\nrow, and less than or equal to any in its column.\nThere may be more than one saddle point in the array.\nPrint out the coordinates of any saddle points your\nprogram finds. Print out \"No saddle points\" if there\nare none.\n\n[source: http://users.csc.calpoly.edu/~jdalbey/103/Projects/ProgrammingPractice.html]"},"Diversion":{"instructions":"Think of binary numbers: sequences of 0's and 1's. How many \nn-digit binary numbers are there that don't have two adjacent\n1 bits? \n\nFor example, for three-digit numbers, Five of the possible\neight combinations meet the criteria: \n\n   000, 001, 010, 011, 100, 101, 110, 111. \n\nWhat is the number for sequences of length 4, 5, 10, n?\n\nHaving worked out the pattern, there's a second part to the \nquestion: can you prove why that relationship exists? \n\n(Source http://codekata.pragprog.com, \n Code Kata Fifteen -- A Diversion)\n\n"},"Count_Coins":{"instructions":"There are four types of common coins in US currency:\n  quarters (25 cents)\n  dimes (10 cents)\n  nickels (5 cents) \n  pennies (1 cent)\n  \nThere are 6 ways to make change for 15 cents:\n  A dime and a nickel;\n  A dime and 5 pennies;\n  3 nickels;\n  2 nickels and 5 pennies;\n  A nickel and 10 pennies;\n  15 pennies.\n  \nHow many ways are there to make change for a dollar\nusing these common coins? (1 dollar = 100 cents).\n\n[Source http://rosettacode.org]"},"Poker_Hands":{"instructions":"A poker deck contains 52 cards - each card has a suit which\nis one of clubs, diamonds, hearts, or spades \n(denoted C, D, H, and S in the input data). \n\nEach card also has a value which is one of \n2, 3, 4, 5, 6, 7, 8, 9, 10, jack, queen, king, ace \n(denoted 2, 3, 4, 5, 6, 7, 8, 9, T, J, Q, K, A). \n\nFor scoring purposes, the suits are unordered while the\nvalues are ordered as given above, with 2 being the lowest\nand ace the highest value.\n\nA poker hand consists of 5 cards dealt from the deck. Poker\nhands are ranked by the following partial order from lowest\nto highest.\n\nHigh Card: Hands which do not fit any higher category are\nranked by the value of their highest card. If the highest\ncards have the same value, the hands are ranked by the next\nhighest, and so on.\n\nPair: 2 of the 5 cards in the hand have the same value. \nHands which both contain a pair are ranked by the value of\nthe cards forming the pair. If these values are the same, \nthe hands are ranked by the values of the cards not \nforming the pair, in decreasing order.\n\nTwo Pairs: The hand contains 2 different pairs. Hands \nwhich both contain 2 pairs are ranked by the value of \ntheir highest pair. Hands with the same highest pair \nare ranked by the value of their other pair. If these \nvalues are the same the hands are ranked by the value \nof the remaining card.\n\nThree of a Kind: Three of the cards in the hand have the \nsame value. Hands which both contain three of a kind are \nranked by the value of the 3 cards.\n\nStraight: Hand contains 5 cards with consecutive values. \nHands which both contain a straight are ranked by their \nhighest card.\n\nFlush: Hand contains 5 cards of the same suit. Hands which \nare both flushes are ranked using the rules for High Card.\n\nFull House: 3 cards of the same value, with the remaining 2\ncards forming a pair. Ranked by the value of the 3 cards.\n\nFour of a kind: 4 cards with the same value. Ranked by the\nvalue of the 4 cards.\n\nStraight flush: 5 cards of the same suit with consecutive\nvalues. Ranked by the highest card in the hand.\n\nYour job is to rank pairs of poker hands and to indicate\nwhich, if either, has a higher rank.\n\nExamples:\nInput: Black: 2H 3D 5S 9C KD White: 2C 3H 4S 8C AH\nOutput: White wins - high card: Ace \n\nInput: Black: 2H 4S 4C 2D 4H White: 2S 8S AS QS 3S\nOutput: Black wins - full house\n\nInput: Black: 2H 3D 5S 9C KD White: 2C 3H 4S 8C KH\nOutput: Black wins - high card: 9\n\nInput: Black: 2H 3D 5S 9C KD White: 2D 3H 5C 9S KH\nOutput: Tie\n"},"Reverse_Roman":{"instructions":"Given a Roman number as a string (eg \"XX\") determine\nits integer value (eg 20).\n\nYou cannot write numerals like IM for 999.\nWikipedia states \"Modern Roman numerals are written by\nexpressing each digit separately starting with the\nleftmost digit and skipping any digit with a value of zero.\"\n\nExamples:\n\n   \"I\" -> 1 |    \"X\" -> 10 |    \"C\" -> 100 |    \"M\" -> 1000 \n  \"II\" -> 2 |   \"XX\" -> 20 |   \"CC\" -> 200 |   \"MM\" -> 2000 \n \"III\" -> 3 |  \"XXX\" -> 30 |  \"CCC\" -> 300 |  \"MMM\" -> 3000 \n  \"IV\" -> 4 |   \"XL\" -> 40 |   \"CD\" -> 400 | \"MMMM\" -> 4000 \n   \"V\" -> 5 |    \"L\" -> 50 |    \"D\" -> 500 | \n  \"VI\" -> 6 |   \"LX\" -> 60 |   \"DC\" -> 600 | \n \"VII\" -> 7 |  \"LXX\" -> 70 |  \"DCC\" -> 700 | \n\"VIII\" -> 8 | \"LXXX\" -> 80 | \"DCCC\" -> 800 | \n  \"IX\" -> 9 |   \"XC\" -> 90 |   \"CM\" -> 900 | \n\n \"MCMXC\" -> 1990 (\"M\" -> 1000 + \"CM\" -> 900 + \"XC\" -> 90)\n\"MMVIII\" -> 2008 (\"MM\" -> 2000 + \"VIII\" -> 8)\n  \"XCIX\" -> 99   (\"XC\" -> 90 + \"IX\" -> 9)\n \"XLVII\" -> 47   (\"XL\" -> 40 + \"VII\" -> 7)\n\n"},"Combined_Number":{"instructions":"Write a function accepting a list of non negative integers, \nand returning their largest possible combined number\nas a string. For example\n\ngiven [50, 2, 1, 9] it returns \"95021\"    (9 + 50 + 2 + 1)\ngiven [5, 50, 56]   it returns \"56550\"    (56 + 5 + 50)\ngiven 420, 42, 423] it returns \"42423420\" (42 + 423 + 420)\n\nSource [https://blog.svpino.com/about]\n"},"Roman_Numerals":{"instructions":"Given a positive integer number (eg 42) determine\nits Roman numeral representation as a String (eg \"XLII\").\n\nYou cannot write numerals like IM for 999.\nWikipedia states \"Modern Roman numerals are written by\nexpressing each digit separately starting with the\nleftmost digit and skipping any digit with a value of zero.\"\n\nExamples:\n\n1 ->    \"I\" | 10 ->    \"X\" | 100 ->    \"C\" | 1000 ->    \"M\"\n2 ->   \"II\" | 20 ->   \"XX\" | 200 ->   \"CC\" | 2000 ->   \"MM\"\n3 ->  \"III\" | 30 ->  \"XXX\" | 300 ->  \"CCC\" | 3000 ->  \"MMM\"\n4 ->   \"IV\" | 40 ->   \"XL\" | 400 ->   \"CD\" | 4000 -> \"MMMM\"\n5 ->    \"V\" | 50 ->    \"L\" | 500 ->    \"D\" |\n6 ->   \"VI\" | 60 ->   \"LX\" | 600 ->   \"DC\" |\n7 ->  \"VII\" | 70 ->  \"LXX\" | 700 ->  \"DCC\" |\n8 -> \"VIII\" | 80 -> \"LXXX\" | 800 -> \"DCCC\" |\n9 ->   \"IX\" | 90 ->   \"XC\" | 900 ->   \"CM\" |\n\n1990 -> \"MCMXC\"  (1000 -> \"M\"  + 900 -> \"CM\" + 90 -> \"XC\")\n2008 -> \"MMVIII\" (2000 -> \"MM\" + 8 -> \"VIII\")\n  99 -> \"XCIX\"   (90 -> \"XC\" + 9 -> \"IX\")\n  47 -> \"XLVII\"  (40 -> \"XL\" + 7 -> \"VII\")\n\n"},"LCD_Digits":{"instructions":"Your task is to create an LCD string representation of an\ninteger value using a 3x3 grid of space, underscore, and \npipe characters for each digit. Each digit is shown below \n(using a dot instead of a space)\n\n._.   ...   ._.   ._.   ...   ._.   ._.   ._.   ._.   ._.\n|.|   ..|   ._|   ._|   |_|   |_.   |_.   ..|   |_|   |_|\n|_|   ..|   |_.   ._|   ..|   ._|   |_|   ..|   |_|   ..|\n\n\nExample: 910\n\n._. ... ._.\n|_| ..| |.|\n..| ..| |_|\n\n\n"},"Fizz_Buzz_Plus":{"instructions":"Write a program that prints the numbers from 1 to 100, but...\n\nnumbers that are exact multiples of 3, \nor that contain 3, must print a string containing \"Fizz\"\n   For example 9 -> \"...Fizz...\"\n   For example 31 -> \"...Fizz...\"\n\nnumbers that are exact multiples of 5, \nor that contain 5, must print a string containing \"Buzz\"\n   For example 10 -> \"...Buzz...\"\n   For example 51 -> \"...Buzz...\"\n\n\n\n\n   \n   \n\n"},"100_doors":{"instructions":"100 doors in a row are all initially closed. You make\n100 passes by the doors. The first time through, you\nvisit every door and toggle the door (if the door is\nclosed, you open it; if it is open, you close it).\nThe second time you only visit every 2nd door (door\n#2, #4, #6, ...). The third time, every 3rd door\n(door #3, #6, #9, ...), etc, until you only visit\nthe 100th door.\n\nQuestion: What state are the doors in after the last\npass? Which are open, which are closed?\n\n[Source http://rosettacode.org]"},"Word_Wrap":{"instructions":"\nYour task is to write a function that takes two arguments,\na string and an integer width.\n\nThe function returns the string, but with line breaks\ninserted at just the right places to make sure that no line\nis longer than the column number.\nYou try to break lines at word boundaries.\n\nLike a word processor, break the line by replacing\nthe last space in a line with a newline."},"Recently_Used_List":{"instructions":"Develop a recently-used-list class to hold strings \nuniquely in Last-In-First-Out order.\n\no) A recently-used-list is initially empty.\n\no) The most recently added item is first, the least\n   recently added item is last.\n\no) Items can be looked up by index, which counts from zero.\n\no) Items in the list are unique, so duplicate insertions\n   are moved rather than added.\n\nOptional extras\n\no) Null insertions (empty strings) are not allowed.\n\no) A bounded capacity can be specified, so there is an upper\n   limit to the number of items contained, with the least\n   recently added items dropped on overflow.\n\n\n"}}